syntax = "proto3";

package graphql;

import "google/protobuf/descriptor.proto";

option go_package = "github.com/proto-graphql/proto-graphql/go/graphqlpb";

message GraphqlSchemaOptions {
  string type_prefix = 1;
  bool ignore_requests = 2;
  bool ignore_responses = 3;
  bool ignore = 4;
}

extend google.protobuf.FileOptions {
  GraphqlSchemaOptions schema = 2056;
}

message GraphqlObjectTypeOptions {
  // Do not generate GraphQL Object and Input. Nested types will not be ignored.
  bool ignore = 1;
  // If `squash_union` is true, the message is converted to `union` instead of object type.
  //
  // ```proto
  // message Content {
  //   option (graphql.object_type).squash_union = true;
  //   oneof content {
  //     Blog blog = 2;
  //     Video video = 2;
  //   }
  // }
  // ```
  //
  // ```grahpql
  // union Content = Blog | Video
  // ```
  bool squash_union = 2;
  // If `interface` is true, the message is converted to `interface` instead of object type.
  bool interface = 3;
  // Specify a object name in GraphQL. If do not specified, use the same as a Protobuf message field name.
  //
  // ```proto
  // message Foo {
  //   option (graphql.object_type).name = "Bar"
  //   // ...
  // }
  // ````
  //
  // ```grahpql
  // object Bar {
  //   # ...
  // }
  // ```
  string name = 4;
}

message GraphqlInputTypeOptions {
  // Do not always generate partial input types.
  bool no_partial = 1;
  // Do not generate GraphQL Input. Nested types will not be ignored.
  bool ignore = 2;
}

extend google.protobuf.MessageOptions {
  GraphqlObjectTypeOptions object_type = 2056;
  GraphqlInputTypeOptions input_type = 2057;
}

enum Nullability {
  NULLABILITY_UNSPECIFIED = 0;
  NULLABLE = 1;
  NON_NULL = 2;
}

message GraphqlFieldOptions {
  bool ignore = 1;
  // Specify a field name in GraphQL. If do not specified, use the same as a Protobuf message field name.
  //
  // ```proto
  // message User {
  //   // Required. Output only.
  //   uint64 id = 1 [(graphql.field).name = "databaseId"];
  // }
  // ````
  //
  // ```grahpql
  // object User {
  //   databaseId: String!
  // }
  // ```
  string name = 2;
  // Omit resolver implementation in code generation.
  bool skip_resolver = 3;
  // Use ID type.
  //
  // ```proto
  // message User {
  //   // Required. Output only.
  //   uint64 id = 1 [(graphql.field).id = true];
  // }
  // ````
  //
  // ```grahpql
  // object User {
  //   id: ID!
  // }
  // ```
  bool id = 4;

  // Indicates the nullability of the output for a given field.
  Nullability output_nullability = 11;
  // Indicates the nullability of the input for a given field.
  Nullability input_nullability = 12;
  // Indicates the nullability of the partial input for a given field.
  Nullability partial_input_nullability = 13;
}

extend google.protobuf.FieldOptions {
  GraphqlFieldOptions field = 2056;
}

message GraphqlOneofOptions {
  bool ignore = 1;
}

extend google.protobuf.OneofOptions {
  GraphqlOneofOptions oneof = 2056;
}

message GraphqlEnumOptions {
  bool ignore = 1;
  // Specify an enum name in GraphQL. If do not specified, use the same as a Protobuf message field name.
  //
  // ```proto
  // enum Foo {
  //   option (graphql.enum_type).name = "Bar"
  //   // ...
  // }
  // ````
  //
  // ```grahpql
  // enum Bar {
  //   # ...
  // }
  // ```
  string name = 4;
}

extend google.protobuf.EnumOptions {
  GraphqlEnumOptions enum_type = 2056;
}

message GraphqlEnumValueOptions {
  bool ignore = 1;
}

extend google.protobuf.EnumValueOptions {
  GraphqlEnumValueOptions enum_value = 2056;
}
